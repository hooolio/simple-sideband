when RULE_INIT priority 500 {
    # Version 1.1 14/7/2023 PRW 
    # Simple sideband iRule for doing simple sideband calls from iRules
    # Note that this must be created as /Common/simple_sideband ( or the references inside the irule updated )
    # Used for performing simple sideband operations eg to send a UDP payload of "test string":
    # set response [call /Common/simple_sideband::udp_req 10.20.20.34:53 "test string" {} ]
    # to perform a HTTP POST to the /login page:
    # set response [call /Common/simple_sideband::http_req 10.20.20.34:80 "/login" { method POST payload $payload }]
    #
    # 
    
}
proc request { {destination ""} {payload ""} {options {}} } {
    # Procedure for sending data
    # destination is either an IP address:port or a Virtual Server name
    # payload is a block of data - either ascii or binary
    # options contains extra options
        # protocol - protocol name eg TCP or UDP. Default is TCP
        # debug - send debugging logs. Default is 0
        # connect_timeout - set connect timeout in secs ( default 1 sec )
        # timeout - set total timeout in seconds ( default 5 secs )
        # idle - set the idle timeout ( default 3 secs )
        # recv_bytes - set amount of data to receive
        # retries - set the number of retries ( default 1 )
    
    # Return data is an array where the first item is error and second is relevant data eg { 0 2416}
    # error is 0 for no error and 1 for an error
    # second entry is the error text in the case of an error, or relevant data in the case of no error
    # eg for a connect error, the return code would be { 1 "Connect to 1.2.3.4:23 failed status:timeout error: "}
    # for a successful connection with no received bytes this would be { 1 1234 } where 1234 is the number of sent bytes
    # for a successful connection with received bytes this would be { 1 {Hello world!} } where the second item is the data returned. Note that all of the data may not be retured because there may be a timeout first
     

    if { $destination == "" } {
        # Destination has not been set, throw an error
        return {1 "No destination set"}
    }
    if { $payload == "" } {
        # Destination has not been set, throw an error
        return {1 "No payload set"}
    }
    # Set defaults
    set protocol TCP
    set debug 0
    set connect_timeout 1
    set timeout 5
    set idle 3
    set recv_bytes 0
    set retries 1
    # Handle options
    foreach {option value} $options {
        switch -- $option {
            "protocol" { set protocol $value }
            "debug" { set debug 1 }
            "connect_timeout" { set connect_timeout [expr {$value * 1000}] }
            "timeout" { set timeout $value }
            "idle" { set idle $value }
            "recv_bytes" { set recv_bytes $value }
            "retries" { set retries $value }
        }
    }

    # Connect to endpoint
    set success 0
    set error ""
    for { set retry 0 } {$retry < $retries} {incr retry 1} {
        set start [clock seconds]
        # Try to connect
        if {[catch {\
        connect -protocol $protocol -timeout $timeout -idle $idle -status conn_status $destination } conn] || \
        ($conn eq "") \
        } {
            # Error in connection - try again
            set error "Connect to $destination failed status:$conn_status error: $conn"
            continue
        }
        if { $debug } { log local0.debug "Connected to $destination status: $conn_status" }
        # Send data
        if {[catch {\
        send -status send_status $conn $payload } sent] || \
        ($send_status ne "sent") || \
        ($sent != [string length $payload]) \
        } {
            # Error in sending - try again
            set error "Sending to $destination failed status: $send_status error: $sent"
            catch {close $conn}
            continue
        }
        if { $debug } { log local0.debug "Sent $payload to $destination status: $send_status" }
        
        if { ! $recv_bytes } {
            catch {close $conn}
            return [list 0 $sent]
        }
        # Check received data
        set received_data ""
        while { [expr {[clock seconds] - $start}] < $timeout } {
            append received_data [recv -timeout 500 $conn]
            if { $debug } { log local0.debug "Received $received_data" }
            if { [string length $received_data] >= $recv_bytes } {
                break
            }
        }
        catch {close $conn}
        return [list 0 $received_data]
    }
    return [list 1 $error]
}
proc http_req { {destination ""} {url "/"} {options {}} } {
    # Procedure for sending HTTP-based data
    # destination is either a virtual server or an IP address and port
    # url is the URL to be requested
    # options contains extra options
        # method - the method to use. Default is POST
        # version - the HTTP version to use eg 1.0
        # payload - in the case of a POST, this is the payload to be sent
        # headers - a TCL list of extra headers eg { Content-Type application/json }
    # Return is an array of status code ( or 0 for timeout ), response headers and payload
    # eg { 200 {Content-Length 12} {Hello world!} }
    # Set defaults
    set tcp_options { protocol TCP recv_bytes 12}
    set method GET
    set version 1.1
    set payload ""
    set headers_extra {}
    # Handle options
    foreach {option value} $options {
        switch -- $option {
            "method" { set method $value }
            "version" { set version $value }
            "payload" { set payload $value }
            "headers" { set headers_extra $value}
            default { lappend tcp_options [list $option $value]}
        }
    }
    # Create the basic request string
    set http_request "$method $url HTTP/$version\r\n"
    # Handle headers
    if { [string first : $destination] != -1 } {
        # If the destination is an IP address or name, use it as the Host
        set headers [list Host [lindex [split $destination :] 0] ]
    } else {
        set headers {}
    }
    
    if { $payload != "" } {
        # Set Content-Length
        lappend headers [list Content-Length [string length $payload]]
    }
    foreach {header value} $headers_extra {
        set i [lsearch -exact $headers $header ]
        if { $i != -1 } {
            # If the header exists, update it
            set headers [lreplace $headers $i [expr {$i + 1}] $header $value]
        } else {
            # Else append it
            lappend headers [list $header $value]
        }
    }
    foreach {header value} $headers {
        append http_request "$header: $value\r\n"
    }
    append http_request "\r\n$payload"
    set response [call /Common/simple_sideband::request $destination $http_request $tcp_options]
    if { [lindex $response 0] == 1 } {
        # There was an error, return error
        return [list 0 {} {}]
    } else {
        # An HTTP response which we need to decode
        set data [lindex $response 1]
        # First, split it into headers and body based on \r\n\r\n
        set split [string first "\r\n\r\n" $data ]
        if { $split == -1 } {
            # Cannot parse the response
            return [list 0 {} {}]
        }
        set head_string [string map [list "\r\n" "\n"] [string range $data 0 $split]] 
        set head_list [split $head_string "\n"]
        # Retrieve the header line eg HTTP/1.1 200 OK
        set header_line [lindex $head_list 0]
        set status_code [lindex [split $header_line " "] 1]
        # Handle returned headers
        set headers {}
        foreach item [lrange $head_list 1 end] {
            if { $item == "" } { continue }
            set k [split $item :]
            lappend headers [lindex $k 0] [string trim [lindex $k 1]]
        }
        # Increment by 4 to skip the \r\n\r\n
        incr split 4
        set body [string range $data $split end]
        return [ list $status_code $headers $body]
    }
}
proc tcp_req { {destination ""} {payload ""} {options {}} } {
    # Procedure for sending TCP-based data
    lappend options protocol TCP
    return [call /Common/simple_sideband::request $destination $payload $options]
}
proc udp_req { {destination ""} {payload ""} {options {}} } {
    # Procedure for sending UDP-based data
    lappend options protocol UDP
    return [call /Common/simple_sideband::request $destination $payload $options]
}

proc dns_query { fqdn } {
    # Procedure to create a DNS A type query
    # https://datatracker.ietf.org/doc/html/rfc1035

    #                                 1  1  1  1  1  1
    #   0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |                      ID                       |
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |                    QDCOUNT                    |
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |                    ANCOUNT                    |
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |                    NSCOUNT                    |
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |                    ARCOUNT                    |
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # Set variables
    # Response starts as blank
    set response ""
    # Header
    set ID [expr {int(rand() * 65000)}]
    append response [binary format S $ID]
    append response [binary format S 8]
    append response [binary format SSSS 1 0 0 0 ]
    # Question section
    #                                 1  1  1  1  1  1
    #   0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |                                               |
    # /                     QNAME                     /
    # /                                               /
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |                     QTYPE                     |
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # |                     QCLASS                    |
    # +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    # QNAME: a domain name represented as a sequence of labels, where
    #            each label consists of a length octet followed by that
    #            number of octets.  The domain name terminates with the
    #            zero length octet for the null label of the root.  Note
    #            that this field may be an odd number of octets; no
    #            padding is used.
    # eg www.example.com is 3www7example3com0 as format ca3ca7ca3c
    set QNAME ""
    foreach label [split $fqdn .] {
        set length [string length $label]
        append QNAME [binary format ca* $length $label]
    }
    # Append the null
    append QNAME [binary format c 0]
    append response $QNAME
    # Add QTYPE and QCLASS
    append response [binary format S 1 ]
    append response [binary format S 1 ]
    return $response
}

proc dns_response { response } {
    # Procedure to decode a DNS response

    # Example response data :
    # 0000   d4 46 80 08 00 01 00 01 00 00 00 00 03 77 77 77
    # 0010   07 65 78 61 6d 70 6c 65 03 63 6f 6d 00 00 01 00
    # 0020   01 c0 0c 00 01 00 01 00 00 00 0c 00 04 01 02 03
    # 0030   04
    # d4 46 = query ID
    # 80 08 is header showing response
    # 00 01 is query number
    # 00 01 is answer RRs number
    # 00 00 is authority RRs number
    # 00 00 is additional RRs number
    # 03 77 77 77 07 65 78 61 6d 70 6c 65 03 63 6f 6d 00 is the query name
    # 00 01 is the query TYPE
    # 00 01 is the query CLASS
    # c0 0c 00 01 00 01 00 00 00 0c 00 04 01 02 03 04 is the answer RR
    # ie NAME, TYPE, CLASS, TTL, RDATALENGTH, RDATA
    # c0 0c is a link to the NAME ( can be a label but is often null )
    # 00 01 is TYPE
    # 00 01 is CLASS
    # 00 00 00 0c is TTL
    # 00 04 is the RDATALENGTH
    # 01 02 03 04 is the RDATA ie 1.2.3.4
    binary scan $response SSSSSS ID HDR QRNUM ANSNUM AUTHNUM ADDNUM
    set ID [expr { $ID & 0xffff }]
    set HDR [expr { $HDR & 0xffff }]
    set return [list [list $ID $HDR $QRNUM $ANSNUM $AUTHNUM $ADDNUM ]]
    # Decode query
    set index 12
    set query_list [list]
    while {$index < [string length $response]} {
        binary scan $response @${index}c length
        incr index 1
        if { $length == 0 } {
            break 
        }
        binary scan $response @${index}a${length} name
        incr index $length
        lappend query_list $name
    }
    set query_name [join $query_list "."]
    binary scan $response @${index}SS query_type query_class
    incr index 4
    lappend return [list $query_name $query_type $query_class]
    
    # Decode Answer RRS
    set answer_list {}
    if { $ANSNUM } {
        while { $index < [string length $response ]} {
            binary scan $response @${index}SSSIS answer_name answer_type answer_class answer_ttl answer_length
            incr index 12
            set a [binary scan $response @${index}c${answer_length} answer_data]
            incr index $answer_length
            if { $answer_type == 1 } {
                # If the answer is an A record, convert to dotted-decimal
                set r [scan $answer_data "%d%d%d%d" a b c d]
                if { $r == 4 } {
                    set answer_data "$a.$b.$c.$d"
                }
            }
            lappend answer_list [list $answer_type $answer_class $answer_ttl $answer_data]
            if { [llength $answer_list] == $ANSNUM } { break }
        }
    }
    lappend return $answer_list
    # Decode Authority RRs
    set auth_list {}
    if { $AUTHNUM } {
        while { $index < [string length $response ]} {
            binary scan $response @${index}SSSIS auth_name auth_type auth_class auth_ttl auth_length
            incr index 12
            binary scan $response @${index}c${auth_length} auth_data
            incr index $auth_length
            if { $auth_type == 1 } {
                # If the auth is an A record, convert to dotted-decimal
                set r [scan $auth_data "%d%d%d%d" a b c d]
                if { $r == 4 } {
                    set auth_data "$a.$b.$c.$d"
                }
            }
            lappend auth_list [list $auth_type $auth_class $auth_ttl $auth_data]
            if { [llength $auth_list] == $AUTHNUM } { break }
        }
    }
    lappend return $auth_list
    
    # Decode Additional RRs
    set add_list {}
    if { $ADDNUM } {
        while { $index < [string length $response ]} {
            binary scan $response @${index}SSSIS add_name add_type add_class add_ttl add_length
            incr index 12
            binary scan $response @${index}c${add_length} add_data
            incr index $add_length
            if { $add_type == 1 } {
                # If the add is an A record, convert to dotted-decimal
                set r [scan $add_data "%d%d%d%d" a b c d]
                if { $r == 4 } {
                    set add_data "$a.$b.$c.$d"
                }
            }
            lappend add_list [list $add_type $add_class $add_ttl $add_data]
            if { [llength $add_list] == $ADDNUM } { break }
        }
    }
    lappend return $add_list
    return $return
}
